import java.math.*;
public class Stuff {

	private static final BigDecimal SQRT_DIG = new BigDecimal(150);
	private static final BigDecimal SQRT_PRE = new BigDecimal(10).pow(SQRT_DIG.intValue());
	private static final BigDecimal φ = new BigDecimal(
			"1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752"
			+ "1266338622235369317931800607667263544333890865959395829056383226613199282902678806752087668925017116962070322210432162695"
			+ "4862629631361443814975870122034080588795445474924618569536486444924104432077134494704956584678850987433944221254487706647"
			+ "80915884607499887124007652170575179788341662562494075890697040002812104276217711177780531531714101170466659914669798731761"
			+ "35600670874807101317952368942752194843530567830022878569978297783478458782289110976250030269615617002504643382437764861028"
			+ "383126833037242926752631165339247316711121158818638513316203840052221657912866752946549068113171599343235973494985090409476"
			+ "213222981017261070596116456299098162905552085247903524060201727997471753427775927786256194320827505131218156285512224809394"
			+ "7123414517022373580577278616008688382952304592647878017889921990270776903895321968198615143780314997411069260886742962267575"
			+ "6052317277752035361393621076738937645560606059216589466759551900400555908950229530942312482355212212415444006470340565734797"
			+ "6639723949499465845788730396230903750339938562102423690251386804145779956981224457471780341731264532204163972321340444494873"
			+ "023154176768937521030687378803441700939544096279558986787232095124268935573097045095956844017555198819218020640529055189349"
			+ "475926007348522821010881946445442223188913192946896220023014437702699230078030852611807545192887705021096842493627135925187"
			+ "607778846658361502389134933331223105339232136243192637289106705033992822652635562090297986424727597725655086154875435748264"
			+ "718141451270006023890162077732244994353088999095016803281121943204819643876758633147985719113978153978074761507722117508269"
			+ "458639320456520989698555678141069683728840587461033781054443909436835835813811311689938555769754841491445341509129540700501"
			+ "947754861630754226417293946803673198058618339183285991303960720144559504497792120761247856459161608370594987860069701894098"
			+ "86400764436170933417270919143365013715766011480381430626238051432117348151005590134561011800790506381421527093085880928757"
			+ "03450507808145458819906336129827981411745339273120809289727922213298064294687824274874017450554067787570832373109759151177"
			+ "62978443284747908176518097787268416117632503861211291436834376702350371116330725869883258710336322238109809012110198991768"
			+ "41491751233134015273384383723450093478604979294599158220125810459823092552872124137043614910205471855496118087642657651106"
			+ "054588147560443178479858453973128630162544876114852021706440411166076695059775783257039511087823082710647893902111569103927"
			+ "683845386333321565829659773103436032322545743637204124406408882673758433953679593123221343732099574988946995656473600729599"
			+ "9839128810319742631251797141432012311279551894778172691415891177991956481255800184550656329528598591000908621802977563789259"
			+ "9916499464281930222935523466747593269516542140210913630181947227078901220872873617073486499981562554728113734798716569527489"
			+ "0081443840532748378137824669174442296349147081570073525457070897726754693438226195468615331209533579238014609273510210119190"
			+ "21836067509730895752895774681422954339438549315533963038072916917584610146099505506480367930414723657203986007355076090231731"
			+ "250161320484358364817704848181099160244252327167219018933459637860878752870173935930301335901123710239171265904702634940283076"
			+ "6876743638651327106280323174069317334482343564531850581353108549733350759966778712449058363675413289086240632456395357212524261"
			+ "1702780286560432349428373017255744058372782679960317393640132876277012436798311446436947670531272492410471670013824783128656506"
			+ "49343418039004101780533950587724586655755229391582397084177298337282311525692609299594224000056062667867435792397245408481765"
			+ "19734362652689448885527202747787473359835367277614075917120513269344837529916499809360246178442675727767900191919070380522046"
			+ "123248239132610432719168451230602362789354543246176997575368904176365025478513");



	private static final long PRECISION_START_NUMBER = 51;/*This is the upper number to dertimine the ratio in the fibonacci sequence
	so this class will evaluate f(PRECISION_START_NUMBER) and f( PRECISION_START_NUMBER-1) keep this in mind when entering number over 30;
	*/
	public static void main(String[] args) {
		final long START_TIME = System.currentTimeMillis();
		BigDecimal div1 = new BigDecimal(fib(PRECISION_START_NUMBER));
		System.err.println("div1 done. \nTime Since Execution " +
		((System.currentTimeMillis()-START_TIME)/1000.0) + " Seconds");
		BigDecimal div2 = new BigDecimal(Long.sum(new Long(div1.toString()) ,
				new Long("-"+ Long.toString(fib(Long.sum(PRECISION_START_NUMBER,-2L))))));
		BigDecimal approxφ = div1.divide(div2,1000,RoundingMode.HALF_UP);
		//BigDecimal one = new BigDecimal(1);
		//BigDecimal two = new BigDecimal(2);
		//BigDecimal five = new BigDecimal(5);

		//φ = (one.add(bigSqrt(five)).divide(two, 100,RoundingMode.HALF_UP));
		System.out.println(φ);
		System.out.println(approxφ);
		BigDecimal precentError =
				(((approxφ.subtract(φ)).abs()).divide(φ.abs(),1000,RoundingMode.HALF_UP)).multiply(new BigDecimal(100));
		System.out.println("Precent Error = " + precentError);
		final long END_TIME = System.currentTimeMillis();
        System.err.println("Executed in " + ((END_TIME - START_TIME)/1000.0) + " seconds");



	}
	public static long fib(long n){
		    if(n == 0)
		        return 0;
		    else if(n == 1)
		      return 1;
		   else
		      return fib(n - 1) + fib(n - 2);
	}
	private static BigDecimal sqrtNewtonRaphson  (BigDecimal c, BigDecimal xn, BigDecimal precision){
	    BigDecimal fx = xn.pow(2).add(c.negate());
	    BigDecimal fpx = xn.multiply(new BigDecimal(2));
	    BigDecimal xn1 = fx.divide(fpx,2*SQRT_DIG.intValue(),RoundingMode.HALF_DOWN);
	    xn1 = xn.add(xn1.negate());
	    BigDecimal currentSquare = xn1.pow(2);
	    BigDecimal currentPrecision = currentSquare.subtract(c);
	    currentPrecision = currentPrecision.abs();
	    if (currentPrecision.compareTo(precision) <= -1){
	        return xn1;
	    }
	    return sqrtNewtonRaphson(c, xn1, precision);
	}
	public static BigDecimal bigSqrt(BigDecimal c){
	    return sqrtNewtonRaphson(c,new BigDecimal(1),new BigDecimal(1).divide(SQRT_PRE));
	}

}
